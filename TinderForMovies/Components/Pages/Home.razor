@page "/"
@using TinderForMovies.Models
@using TinderForMovies.Services
@using TinderForMovies.Components.Shared
@inject ITvdbService TvdbService
@inject IMovieInteractionService InteractionService

<div class="discover-container">
    <div class="app-header">
        <h1>🍿 Tinder for Movies</h1>
        <p>Discover your next favorite movie</p>
    </div>

    @if (isLoading)
    {
        <div class="loading-container">
            <div class="movie-skeleton">
                <div class="skeleton-poster"></div>
                <div class="skeleton-info">
                    <div class="skeleton-title"></div>
                    <div class="skeleton-details"></div>
                    <div class="skeleton-rating"></div>
                    <div class="skeleton-text"></div>
                    <div class="skeleton-text short"></div>
                </div>
            </div>
            <div class="loading-text">
                <div class="shimmer-text">Finding great movies...</div>
            </div>
        </div>
    }
    else if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="error-container">
            <div class="error-message">
                <h2>⚠️ Something went wrong</h2>
                <p>@errorMessage</p>
                <button class="btn btn-retry" @onclick="LoadMoviesAsync">Try Again</button>
            </div>
        </div>
    }
    else if (currentMovie != null)
    {
        <div class="movie-stack">
            <MovieCard Movie="currentMovie" 
                       OnSwipe="HandleSwipe"
                       OnAnimationComplete="HandleAnimationComplete"
                       @ref="currentMovieCard" />
        </div>

        <div class="action-buttons">
            <button class="btn btn-reject" @onclick="PassMovieButton" disabled="@isProcessingSwipe">
                <span>👎 Pass</span>
            </button>
            <button class="btn btn-match" @onclick="MatchMovieButton" disabled="@isProcessingSwipe">
                <span>❤️ Match</span>
            </button>
        </div>
    }
    else
    {
        <div class="empty-container">
            <div class="empty-message">
                <h2>🎬 No more movies</h2>
                <p>We've run out of movies for now. Check back later!</p>
                <button class="btn btn-retry" @onclick="LoadMoviesAsync">Reload</button>
            </div>
        </div>
    }
</div>

<style>
    .discover-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        padding: 20px;
        height: 100vh;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
    }

    .app-header {
        text-align: center;
        margin-bottom: 30px;
    }

    .app-header h1 {
        font-size: 2.5rem;
        margin-bottom: 10px;
        text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
    }

    .movie-stack {
        position: relative;
        width: 300px;
        height: 500px;
        margin-bottom: 30px;
    }

    .movie-card {
        position: absolute;
        width: 100%;
        height: 100%;
        background: white;
        border-radius: 15px;
        box-shadow: 0 8px 32px rgba(0,0,0,0.3);
        color: #333;
        overflow: hidden;
        display: flex;
        flex-direction: column;
    }

    .movie-poster {
        height: 60%;
        background: #f0f0f0;
        display: flex;
        align-items: center;
        justify-content: center;
        border-bottom: 1px solid #eee;
    }

    .placeholder-poster {
        font-size: 4rem;
        opacity: 0.5;
    }

    .movie-info {
        padding: 20px;
        flex: 1;
        display: flex;
        flex-direction: column;
    }

    .movie-info h2 {
        margin: 0 0 10px 0;
        font-size: 1.5rem;
    }

    .movie-details {
        color: #666;
        margin-bottom: 15px;
        font-weight: 500;
    }

    .synopsis {
        color: #555;
        line-height: 1.4;
        font-size: 0.9rem;
    }

    .action-buttons {
        display: flex;
        gap: 30px;
    }

    .btn {
        padding: 15px 25px;
        border: none;
        border-radius: 50px;
        font-size: 1.1rem;
        cursor: pointer;
        transition: all 0.3s cubic-bezier(0.25, 0.46, 0.45, 0.94);
        font-weight: bold;
        position: relative;
        overflow: hidden;
        min-width: 120px;
    }

    .btn:disabled {
        opacity: 0.6;
        cursor: not-allowed;
        transform: none !important;
        box-shadow: none !important;
    }

    .btn:not(:disabled):hover {
        transform: translateY(-3px) scale(1.05);
        box-shadow: 0 8px 25px rgba(0,0,0,0.3);
    }

    .btn:not(:disabled):active {
        transform: translateY(-1px) scale(1.02);
        transition: all 0.1s ease;
    }

    .btn-reject {
        background: linear-gradient(135deg, #ff4458, #ff6b7a);
        color: white;
    }

    .btn-reject:not(:disabled):hover {
        background: linear-gradient(135deg, #ff6b7a, #ff4458);
        box-shadow: 0 8px 25px rgba(255, 68, 88, 0.4);
    }

    .btn-match {
        background: linear-gradient(135deg, #42a76a, #5cbf84);
        color: white;
    }

    .btn-match:not(:disabled):hover {
        background: linear-gradient(135deg, #5cbf84, #42a76a);
        box-shadow: 0 8px 25px rgba(66, 167, 106, 0.4);
    }

    .btn span {
        position: relative;
        z-index: 1;
    }

    .btn::before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
        transition: left 0.6s;
    }

    .btn:not(:disabled):hover::before {
        left: 100%;
    }

    @@media (max-width: 768px) {
        .movie-stack {
            width: 280px;
            height: 450px;
        }
        
        .app-header h1 {
            font-size: 2rem;
        }
        
        .action-buttons {
            gap: 20px;
        }
    }

    .loading-container, .error-container, .empty-container {
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        min-height: 500px;
    }

    .movie-skeleton {
        width: 300px;
        height: 500px;
        background: rgba(255,255,255,0.1);
        border-radius: 15px;
        backdrop-filter: blur(10px);
        border: 1px solid rgba(255,255,255,0.2);
        overflow: hidden;
        display: flex;
        flex-direction: column;
        margin-bottom: 30px;
    }

    .skeleton-poster {
        height: 60%;
        background: linear-gradient(90deg, rgba(255,255,255,0.1) 0%, rgba(255,255,255,0.2) 50%, rgba(255,255,255,0.1) 100%);
        background-size: 200% 100%;
        animation: shimmer 1.5s infinite;
    }

    .skeleton-info {
        padding: 20px;
        flex: 1;
        display: flex;
        flex-direction: column;
        gap: 12px;
    }

    .skeleton-title, .skeleton-details, .skeleton-rating, .skeleton-text {
        background: linear-gradient(90deg, rgba(255,255,255,0.1) 0%, rgba(255,255,255,0.2) 50%, rgba(255,255,255,0.1) 100%);
        background-size: 200% 100%;
        border-radius: 4px;
        animation: shimmer 1.5s infinite;
    }

    .skeleton-title {
        height: 24px;
        width: 80%;
        animation-delay: 0.1s;
    }

    .skeleton-details {
        height: 16px;
        width: 60%;
        animation-delay: 0.2s;
    }

    .skeleton-rating {
        height: 16px;
        width: 40%;
        animation-delay: 0.3s;
    }

    .skeleton-text {
        height: 14px;
        width: 100%;
    }

    .skeleton-text:nth-child(4) {
        animation-delay: 0.4s;
    }

    .skeleton-text.short {
        width: 70%;
        animation-delay: 0.5s;
    }

    .loading-text {
        text-align: center;
    }

    .shimmer-text {
        font-size: 1.1rem;
        color: rgba(255,255,255,0.8);
        animation: fadeInOut 2s infinite;
    }

    @@keyframes shimmer {
        0% { background-position: -200% 0; }
        100% { background-position: 200% 0; }
    }

    @@keyframes fadeInOut {
        0%, 100% { opacity: 0.6; }
        50% { opacity: 1; }
    }

    .error-message, .empty-message {
        text-align: center;
        background: rgba(255,255,255,0.1);
        padding: 40px;
        border-radius: 20px;
        backdrop-filter: blur(10px);
        border: 1px solid rgba(255,255,255,0.2);
    }

    .btn-retry {
        background: #42a76a;
        color: white;
        border: none;
        padding: 12px 24px;
        border-radius: 25px;
        font-weight: bold;
        cursor: pointer;
        margin-top: 20px;
        transition: transform 0.2s, box-shadow 0.2s;
    }

    .btn-retry:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(0,0,0,0.3);
    }
</style>

@code {
    private bool isLoading = false;  // Start as false to allow initial load
    private bool isLoadingInProgress = false;  // Track actual loading state
    private bool isProcessingSwipe = false;  // Track swipe processing state
    private string? errorMessage;
    private Movie? currentMovie;
    private List<Movie> movieQueue = new();
    private int currentPage = 1;
    private MovieCard? currentMovieCard;

    protected override async Task OnInitializedAsync()
    {
        await LoadMoviesAsync();
    }

    private async Task LoadMoviesAsync()
    {
        // Prevent multiple concurrent loads
        if (isLoadingInProgress) return;
        
        isLoadingInProgress = true;
        
        // Only show loading UI if we have no movies to display
        if (currentMovie == null && movieQueue.Count == 0)
        {
            isLoading = true;
            StateHasChanged();
        }

        try
        {
            var totalPagesAttempted = 0;
            var maxPagesToTry = 50; // Increased from 20
            
            while (movieQueue.Count < 10 && totalPagesAttempted < maxPagesToTry)
            {
                System.Diagnostics.Debug.WriteLine($"Loading page {currentPage}, queue has {movieQueue.Count} movies, attempted {totalPagesAttempted} pages");
                
                var movies = await TvdbService.GetPopularMoviesAsync(currentPage);
                if (!movies.Any())
                {
                    System.Diagnostics.Debug.WriteLine($"No movies returned from API for page {currentPage}");
                    break;
                }

                System.Diagnostics.Debug.WriteLine($"Got {movies.Count} movies from API for page {currentPage}");
                
                // Filter out movies the user has already interacted with
                var newMovies = new List<Movie>();
                foreach (var movie in movies)
                {
                    try
                    {
                        if (!await InteractionService.HasUserInteractedWithMovieAsync(movie.Id))
                        {
                            newMovies.Add(movie);
                        }
                    }
                    catch (Exception ex)
                    {
                        // If we can't check interaction, include the movie
                        System.Diagnostics.Debug.WriteLine($"Error checking interaction for movie {movie.Id}: {ex.Message}");
                        newMovies.Add(movie);
                    }
                }
                
                System.Diagnostics.Debug.WriteLine($"After filtering, got {newMovies.Count} new movies for page {currentPage}");
                
                if (newMovies.Any())
                {
                    movieQueue.AddRange(newMovies);
                    if (currentMovie == null)
                    {
                        ShowNextMovie();
                    }
                }
                
                currentPage++;
                totalPagesAttempted++;
                
                // If we have enough movies, break out
                if (movieQueue.Count >= 10) break;
            }
            
            // Only show "no more movies" if we truly have nothing
            if (currentMovie == null && movieQueue.Count == 0)
            {
                if (totalPagesAttempted >= maxPagesToTry)
                {
                    System.Diagnostics.Debug.WriteLine($"Reached max pages ({maxPagesToTry}), resetting to page 1");
                    currentPage = 1; // Reset to start over
                    errorMessage = "Reached end of available movies. Restarting from the beginning!";
                    // Try one more time from the beginning
                    isLoadingInProgress = false;
                    await LoadMoviesAsync();
                    return;
                }
                else
                {
                    errorMessage = "No movies available from the API. Please try again later.";
                }
            }
            
            System.Diagnostics.Debug.WriteLine($"LoadMoviesAsync completed: queue={movieQueue.Count}, current={currentMovie?.Title ?? "null"}");
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to load movies: {ex.Message}";
            System.Diagnostics.Debug.WriteLine($"LoadMoviesAsync error: {ex}");
        }
        finally
        {
            isLoadingInProgress = false;
            isLoading = false;
            StateHasChanged();
        }
    }

    private void ShowNextMovie()
    {
        if (movieQueue.Any())
        {
            currentMovie = movieQueue.First();
            movieQueue.RemoveAt(0);
            
            System.Diagnostics.Debug.WriteLine($"Showing next movie: {currentMovie.Title}, queue now has {movieQueue.Count} movies");
            
            // Load more movies when queue gets low (on UI thread to prevent threading issues)
            if (movieQueue.Count <= 3 && !isLoadingInProgress)
            {
                System.Diagnostics.Debug.WriteLine("Queue running low, triggering background load");
                _ = LoadMoviesAsync();
            }
        }
        else
        {
            currentMovie = null;
            System.Diagnostics.Debug.WriteLine("No movies in queue, setting currentMovie to null");
            
            // Try to load more movies if queue is empty
            if (!isLoadingInProgress)
            {
                _ = LoadMoviesAsync();
            }
        }
        
        StateHasChanged();
    }

    private async Task PassMovie()
    {
        await PassMovieButton();
    }

    private async Task MatchMovie()
    {
        await MatchMovieButton();
    }

    // New swipe handling methods
    private async Task HandleSwipe(bool isLike)
    {
        if (currentMovie == null || isProcessingSwipe) return;
        
        isProcessingSwipe = true;
        
        try
        {
            if (isLike)
            {
                await InteractionService.SaveMatchAsync(currentMovie);
                System.Diagnostics.Debug.WriteLine($"Swiped right (matched): {currentMovie.Title}");
            }
            else
            {
                await InteractionService.SaveRejectionAsync(currentMovie);
                System.Diagnostics.Debug.WriteLine($"Swiped left (rejected): {currentMovie.Title}");
            }
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"Error saving swipe: {ex.Message}");
            errorMessage = $"Failed to save {(isLike ? "match" : "rejection")}: {ex.Message}";
        }
    }

    private void HandleAnimationComplete()
    {
        ShowNextMovie();
        isProcessingSwipe = false;
        StateHasChanged();
    }

    // Button handlers that trigger swipe animations
    private async Task PassMovieButton()
    {
        if (currentMovieCard != null && !isProcessingSwipe)
        {
            await currentMovieCard.TriggerSwipeAnimation(false);
        }
    }

    private async Task MatchMovieButton()
    {
        if (currentMovieCard != null && !isProcessingSwipe)
        {
            await currentMovieCard.TriggerSwipeAnimation(true);
        }
    }

}
