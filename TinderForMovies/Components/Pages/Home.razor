@page "/"
@using TinderForMovies.Models
@using TinderForMovies.Services
@using TinderForMovies.Components.Shared
@inject ITvdbService TvdbService

<div class="discover-container">
    <div class="app-header">
        <h1>🍿 Tinder for Movies</h1>
        <p>Discover your next favorite movie</p>
    </div>

    @if (isLoading)
    {
        <div class="loading-container">
            <div class="loading-spinner">
                <div class="spinner"></div>
                <p>Finding great movies...</p>
            </div>
        </div>
    }
    else if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="error-container">
            <div class="error-message">
                <h2>⚠️ Something went wrong</h2>
                <p>@errorMessage</p>
                <button class="btn btn-retry" @onclick="LoadMoviesAsync">Try Again</button>
            </div>
        </div>
    }
    else if (currentMovie != null)
    {
        <div class="movie-stack">
            <MovieCard Movie="currentMovie" />
        </div>

        <div class="action-buttons">
            <button class="btn btn-reject" @onclick="PassMovie">
                <span>👎 Pass</span>
            </button>
            <button class="btn btn-match" @onclick="MatchMovie">
                <span>❤️ Match</span>
            </button>
        </div>
    }
    else
    {
        <div class="empty-container">
            <div class="empty-message">
                <h2>🎬 No more movies</h2>
                <p>We've run out of movies for now. Check back later!</p>
                <button class="btn btn-retry" @onclick="LoadMoviesAsync">Reload</button>
            </div>
        </div>
    }
</div>

<style>
    .discover-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        padding: 20px;
        height: 100vh;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
    }

    .app-header {
        text-align: center;
        margin-bottom: 30px;
    }

    .app-header h1 {
        font-size: 2.5rem;
        margin-bottom: 10px;
        text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
    }

    .movie-stack {
        position: relative;
        width: 300px;
        height: 500px;
        margin-bottom: 30px;
    }

    .movie-card {
        position: absolute;
        width: 100%;
        height: 100%;
        background: white;
        border-radius: 15px;
        box-shadow: 0 8px 32px rgba(0,0,0,0.3);
        color: #333;
        overflow: hidden;
        display: flex;
        flex-direction: column;
    }

    .movie-poster {
        height: 60%;
        background: #f0f0f0;
        display: flex;
        align-items: center;
        justify-content: center;
        border-bottom: 1px solid #eee;
    }

    .placeholder-poster {
        font-size: 4rem;
        opacity: 0.5;
    }

    .movie-info {
        padding: 20px;
        flex: 1;
        display: flex;
        flex-direction: column;
    }

    .movie-info h2 {
        margin: 0 0 10px 0;
        font-size: 1.5rem;
    }

    .movie-details {
        color: #666;
        margin-bottom: 15px;
        font-weight: 500;
    }

    .synopsis {
        color: #555;
        line-height: 1.4;
        font-size: 0.9rem;
    }

    .action-buttons {
        display: flex;
        gap: 30px;
    }

    .btn {
        padding: 15px 25px;
        border: none;
        border-radius: 50px;
        font-size: 1.1rem;
        cursor: pointer;
        transition: transform 0.2s, box-shadow 0.2s;
        font-weight: bold;
    }

    .btn:disabled {
        opacity: 0.6;
        cursor: not-allowed;
    }

    .btn:not(:disabled):hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(0,0,0,0.3);
    }

    .btn-reject {
        background: #ff4458;
        color: white;
        min-width: 120px;
    }

    .btn-match {
        background: #42a76a;
        color: white;
        min-width: 120px;
    }

    @@media (max-width: 768px) {
        .movie-stack {
            width: 280px;
            height: 450px;
        }
        
        .app-header h1 {
            font-size: 2rem;
        }
        
        .action-buttons {
            gap: 20px;
        }
    }

    .loading-container, .error-container, .empty-container {
        display: flex;
        justify-content: center;
        align-items: center;
        min-height: 500px;
    }

    .loading-spinner, .error-message, .empty-message {
        text-align: center;
        background: rgba(255,255,255,0.1);
        padding: 40px;
        border-radius: 20px;
        backdrop-filter: blur(10px);
        border: 1px solid rgba(255,255,255,0.2);
    }

    .spinner {
        width: 40px;
        height: 40px;
        border: 4px solid rgba(255,255,255,0.3);
        border-top: 4px solid #ffffff;
        border-radius: 50%;
        animation: spin 1s linear infinite;
        margin: 0 auto 20px;
    }

    @@keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }

    .btn-retry {
        background: #42a76a;
        color: white;
        border: none;
        padding: 12px 24px;
        border-radius: 25px;
        font-weight: bold;
        cursor: pointer;
        margin-top: 20px;
        transition: transform 0.2s, box-shadow 0.2s;
    }

    .btn-retry:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(0,0,0,0.3);
    }
</style>

@code {
    private bool isLoading = true;
    private string? errorMessage;
    private Movie? currentMovie;
    private List<Movie> movieQueue = new();
    private int currentPage = 1;

    protected override async Task OnInitializedAsync()
    {
        await LoadMoviesAsync();
    }

    private async Task LoadMoviesAsync()
    {
        isLoading = true;
        errorMessage = null;
        StateHasChanged();

        try
        {
            var movies = await TvdbService.GetPopularMoviesAsync(currentPage);
            if (movies.Any())
            {
                movieQueue.AddRange(movies);
                if (currentMovie == null)
                {
                    ShowNextMovie();
                }
                currentPage++;
            }
            else if (currentMovie == null)
            {
                errorMessage = "No movies found. Please check your API configuration.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to load movies: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void ShowNextMovie()
    {
        if (movieQueue.Any())
        {
            currentMovie = movieQueue.First();
            movieQueue.RemoveAt(0);
            
            // Load more movies when queue gets low
            if (movieQueue.Count <= 2)
            {
                _ = Task.Run(LoadMoviesAsync);
            }
        }
        else
        {
            currentMovie = null;
        }
    }

    private void PassMovie()
    {
        // TODO: Store the rejection in local storage or service
        ShowNextMovie();
        StateHasChanged();
    }

    private void MatchMovie()
    {
        // TODO: Store the match in local storage or service
        ShowNextMovie();
        StateHasChanged();
    }
}
