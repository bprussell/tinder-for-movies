@using TinderForMovies.Models

<div class="movie-card" 
     id="movie-card-@Movie.Id"
     @ontouchstart="OnTouchStart"
     @ontouchmove="OnTouchMove" 
     @ontouchend="OnTouchEnd"
     @onmousedown="OnMouseDown"
     @onmousemove="OnMouseMove"
     @onmouseup="OnMouseUp"
     @onmouseleave="OnMouseUp"
     style="transform: @GetTransform(); opacity: @GetOpacity();"
     data-swipe-threshold="100"
     data-rotation-factor="0.1"
     data-swipe-direction="@GetSwipeDirection()">
    <div class="movie-poster">
        @if (!string.IsNullOrEmpty(Movie.PosterUrl))
        {
            <img src="@Movie.PosterUrl" alt="@Movie.Title" />
        }
        else
        {
            <div class="placeholder-poster">
                üé¨
            </div>
        }
    </div>
    <div class="movie-info">
        <h2>@Movie.Title</h2>
        <p class="movie-details">
            <span class="year">@Movie.Year</span>
            @if (!string.IsNullOrEmpty(Movie.GenreText))
            {
                <span> ‚Ä¢ </span>
                <span class="genre">@Movie.GenreText</span>
            }
            @if (!string.IsNullOrEmpty(Movie.RuntimeText) && Movie.RuntimeText != "Unknown")
            {
                <span> ‚Ä¢ </span>
                <span class="runtime">@Movie.RuntimeText</span>
            }
        </p>
        @if (!string.IsNullOrEmpty(Movie.RatingText) && Movie.RatingText != "No rating")
        {
            <p class="rating">‚≠ê @Movie.RatingText</p>
        }
        <p class="synopsis" @ref="synopsisElement">
            @(string.IsNullOrEmpty(Movie.Overview) ? "No description available." : Movie.Overview)
        </p>
    </div>
</div>

<style>
    .movie-card {
        position: absolute;
        width: 100%;
        height: 100%;
        background: white;
        border-radius: 15px;
        box-shadow: 0 8px 32px rgba(0,0,0,0.3);
        color: #333;
        overflow: hidden;
        display: flex;
        flex-direction: column;
        transition: opacity 0.2s ease, box-shadow 0.2s ease;
        cursor: grab;
        user-select: none;
        -webkit-user-select: none;
        -moz-user-select: none;
        -ms-user-select: none;
        touch-action: none;
        will-change: transform, opacity;
    }

    .movie-card:active {
        cursor: grabbing;
    }

    .movie-card::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: linear-gradient(45deg, transparent 40%, rgba(76, 175, 80, 0.1) 100%);
        opacity: 0;
        transition: opacity 0.2s ease;
        pointer-events: none;
        z-index: 1;
    }

    .movie-card::after {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: linear-gradient(-45deg, transparent 40%, rgba(244, 67, 54, 0.1) 100%);
        opacity: 0;
        transition: opacity 0.2s ease;
        pointer-events: none;
        z-index: 1;
    }

    .movie-card[data-swipe-direction="right"]::before {
        opacity: 1;
    }

    .movie-card[data-swipe-direction="left"]::after {
        opacity: 1;
    }

    .movie-poster {
        height: 55%;
        background: #f0f0f0;
        display: flex;
        align-items: center;
        justify-content: center;
        border-bottom: 1px solid #eee;
        position: relative;
        overflow: hidden;
    }

    .movie-poster img {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }

    .placeholder-poster {
        font-size: 4rem;
        opacity: 0.5;
    }

    .movie-info {
        padding: 24px;
        flex: 1;
        display: flex;
        flex-direction: column;
        overflow: hidden;
        position: relative;
        z-index: 2;
        background: white;
        min-height: 0;
    }

    .movie-info h2 {
        margin: 0 0 10px 0;
        font-size: 1.5rem;
        line-height: 1.2;
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
    }

    .movie-details {
        color: #666;
        margin-bottom: 8px;
        font-weight: 500;
        font-size: 0.9rem;
    }

    .rating {
        color: #f59e0b;
        margin-bottom: 10px;
        font-weight: 600;
        font-size: 0.9rem;
    }

    .synopsis {
        color: #555;
        line-height: 1.5;
        font-size: 0.9rem;
        flex: 1;
        overflow-y: auto;
        overflow-x: hidden;
        padding-right: 8px;
        margin: 0;
        scrollbar-width: thin;
        scrollbar-color: rgba(0,0,0,0.3) transparent;
        touch-action: pan-y;
        -webkit-overflow-scrolling: touch;
    }

    .synopsis::-webkit-scrollbar {
        width: 4px;
    }

    .synopsis::-webkit-scrollbar-track {
        background: transparent;
    }

    .synopsis::-webkit-scrollbar-thumb {
        background: rgba(0,0,0,0.3);
        border-radius: 2px;
    }

    .synopsis::-webkit-scrollbar-thumb:hover {
        background: rgba(0,0,0,0.5);
    }

    .year {
        font-weight: 600;
    }

    .genre {
        color: #7c3aed;
    }

    .runtime {
        color: #059669;
    }
</style>

@code {
    [Parameter] public Movie Movie { get; set; } = new();
    [Parameter] public EventCallback<bool> OnSwipe { get; set; }
    [Parameter] public EventCallback OnAnimationComplete { get; set; }

    private ElementReference synopsisElement;
    private bool _isDragging = false;
    private bool _isScrollingText = false;
    private float _dragX = 0;
    private float _dragY = 0;
    private float _startX = 0;
    private float _startY = 0;
    private float _swipeThreshold = 100;
    private bool _isAnimating = false;

    private string GetTransform()
    {
        var rotation = _dragX * 0.1f; // Rotate based on horizontal drag
        var scale = Math.Max(0.95f, 1 - Math.Abs(_dragX) * 0.0005f); // Slight scale down when dragging
        
        return $"translate3d({_dragX}px, {_dragY}px, 0) rotate({rotation}deg) scale({scale})";
    }

    private string GetOpacity()
    {
        if (_isAnimating) return "1";
        
        var dragDistance = Math.Abs(_dragX);
        var maxDistance = 200;
        var opacity = Math.Max(0.6f, 1 - (dragDistance / maxDistance) * 0.4f);
        
        return opacity.ToString("F2", System.Globalization.CultureInfo.InvariantCulture);
    }

    private string GetSwipeDirection()
    {
        if (Math.Abs(_dragX) < 50) return "";
        return _dragX > 0 ? "right" : "left";
    }

    // Touch events
    private void OnTouchStart(TouchEventArgs e)
    {
        if (_isAnimating || e.Touches.Length == 0) return;
        
        _isDragging = true;
        _isScrollingText = false; // Reset scroll detection
        _startX = (float)e.Touches[0].ClientX;
        _startY = (float)e.Touches[0].ClientY;
        _dragX = 0;
        _dragY = 0;
    }

    private void OnTouchMove(TouchEventArgs e)
    {
        if (!_isDragging || _isAnimating || e.Touches.Length == 0) return;
        
        var newDragX = (float)e.Touches[0].ClientX - _startX;
        var newDragY = (float)e.Touches[0].ClientY - _startY;
        
        // If this is the first significant movement, determine if it's a vertical scroll or horizontal swipe
        if (!_isScrollingText && Math.Abs(newDragX) < 10 && Math.Abs(newDragY) < 10)
        {
            // Still in the dead zone, don't make a decision yet
            return;
        }
        
        if (!_isScrollingText && Math.Abs(newDragY) > Math.Abs(newDragX) && Math.Abs(newDragY) > 15)
        {
            // This looks like a vertical scroll, not a horizontal swipe
            _isScrollingText = true;
            _isDragging = false;
            return;
        }
        
        if (_isScrollingText) return; // Don't process swipe if we're scrolling
        
        _dragX = newDragX;
        _dragY = newDragY;
        
        StateHasChanged();
    }

    private async Task OnTouchEnd(TouchEventArgs e)
    {
        if (_isScrollingText)
        {
            // Reset flags if we were scrolling
            _isScrollingText = false;
            _isDragging = false;
            return;
        }
        
        if (!_isDragging || _isAnimating) return;
        
        await HandleSwipeEnd();
    }

    // Mouse events (for desktop)
    private void OnMouseDown(MouseEventArgs e)
    {
        if (_isAnimating) return;
        
        _isDragging = true;
        _isScrollingText = false; // Reset scroll detection
        _startX = (float)e.ClientX;
        _startY = (float)e.ClientY;
        _dragX = 0;
        _dragY = 0;
    }

    private void OnMouseMove(MouseEventArgs e)
    {
        if (!_isDragging || _isAnimating) return;
        
        _dragX = (float)e.ClientX - _startX;
        _dragY = (float)e.ClientY - _startY;
        
        StateHasChanged();
    }

    private async Task OnMouseUp(MouseEventArgs e)
    {
        if (!_isDragging || _isAnimating) return;
        
        await HandleSwipeEnd();
    }

    private async Task HandleSwipeEnd()
    {
        _isDragging = false;
        
        var swipeDirection = Math.Abs(_dragX) > _swipeThreshold;
        var isLike = _dragX > _swipeThreshold;
        var isReject = _dragX < -_swipeThreshold;
        
        if (swipeDirection && (isLike || isReject))
        {
            // Trigger swipe callback FIRST (while currentMovie is still correct)
            if (OnSwipe.HasDelegate)
            {
                await OnSwipe.InvokeAsync(isLike);
            }
            
            // Then animate card off screen
            await AnimateCardExit(isLike);
        }
        else
        {
            // Snap back to center
            await AnimateCardReturn();
        }
    }

    private async Task AnimateCardExit(bool isLike)
    {
        _isAnimating = true;
        
        // Calculate the final off-screen position
        var screenWidth = 400; // Approximate screen width
        var finalX = isLike ? screenWidth : -screenWidth;
        var finalRotation = isLike ? 30 : -30;
        
        // Start animation from current position to off-screen
        var startX = _dragX;
        var startRotation = _dragX * 0.1f;
        
        var animationDuration = 300; // milliseconds
        var frames = 30; // 30 frames for smooth animation
        var frameDelay = animationDuration / frames;
        
        for (int frame = 0; frame <= frames; frame++)
        {
            var progress = (float)frame / frames;
            var easedProgress = EaseOutCubic(progress);
            
            _dragX = startX + (finalX - startX) * easedProgress;
            _dragY = _dragY - (progress * 20); // Slight upward movement for natural arc
            
            StateHasChanged();
            
            if (frame < frames)
                await Task.Delay(frameDelay);
        }
        
        if (OnAnimationComplete.HasDelegate)
        {
            await OnAnimationComplete.InvokeAsync();
        }
        
        _isAnimating = false;
        ResetCard();
    }

    private float EaseOutCubic(float t)
    {
        return 1 - (float)Math.Pow(1 - t, 3);
    }

    private async Task AnimateCardReturn()
    {
        _isAnimating = true;
        _dragX = 0;
        _dragY = 0;
        
        await InvokeAsync(() =>
        {
            StateHasChanged();
        });
        
        await Task.Delay(200);
        _isAnimating = false;
    }

    public async Task TriggerSwipeAnimation(bool isLike)
    {
        if (_isAnimating) return;
        
        // Set initial position for button-triggered swipe
        _dragX = isLike ? _swipeThreshold * 0.8f : -(_swipeThreshold * 0.8f);
        StateHasChanged();
        
        await AnimateCardExit(isLike);
    }

    private void ResetCard()
    {
        _dragX = 0;
        _dragY = 0;
        _isDragging = false;
        _isAnimating = false;
    }
}